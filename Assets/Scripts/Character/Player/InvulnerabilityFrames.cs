using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Licht.Impl.Orchestration;
using Licht.Unity.Objects;
using UnityEngine;
using Random = UnityEngine.Random;

public class InvulnerabilityFrames : BaseGameObject
{
    [field: SerializeField]
    public SpriteRenderer TargetSpriteRenderer { get; private set; }
    [field: SerializeField]
    public Damageable Damageable { get; private set; }
    [field: SerializeField]
    public int InvulnerabilityDurationInSeconds { get; private set; }

    [field: SerializeField]
    public AudioSource TakingHit { get; private set; }

    protected override void OnEnable()
    {
        base.OnEnable();
        Damageable.OnDamage += Damageable_OnDamage;
    }

    protected override void OnDisable()
    {
        base.OnDisable();
        Damageable.OnDamage -= Damageable_OnDamage;
    }

    private void Damageable_OnDamage(Damageable.DamageArgs obj)
    {
        DefaultMachinery.AddUniqueMachine("player_invulnerability",
            UniqueMachine.UniqueMachineBehaviour.Replace, HandleInvulnerability());
    }

    private IEnumerable<IEnumerable<Action>> HandleInvulnerability()
    {
        if (TakingHit != null)
        {
            TakingHit.pitch = 1 + Random.value * 0.2f;
            TakingHit.Play();
        }
        Damageable.IsInvulnerable = true;

        yield return TargetSpriteRenderer.BlinkForSeconds(InvulnerabilityDurationInSeconds)
            .AsCoroutine();

        Damageable.IsInvulnerable = false;
    }
}
